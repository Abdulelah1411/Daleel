# -*- coding: utf-8 -*-
"""Daleel_Hakthon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18DrxS9qED6aed3bWYoMmyOOaIql0UVt5
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install openpyxl
import pandas as pd

# استبدل المسار التالي بالمسار الفعلي لملفك في الدرايف
file_path = '/content/drive/MyDrive/Hakathon/Enhanced_Final_Team_Data.xlsx'

# تحميل البيانات من الملف Excel
df = pd.read_excel(file_path)

# عرض أول 5 أسطر للتأكد من تحميل البيانات بنجاح
df.head()

!pip install openpyxl

# prompt: write code to understand the data in exscl

# عرض معلومات حول البيانات
df.info()

# عرض بعض الإحصائيات الوصفية للبيانات الرقمية
df.describe()

# عرض عدد القيم الفريدة لكل عمود
for column in df.columns:
  print(f"عدد القيم الفريدة في العمود '{column}': {df[column].nunique()}")

# عرض بعض القيم الفريدة من كل عمود
for column in df.columns:
  print(f"بعض القيم الفريدة في العمود '{column}': {df[column].unique()[:10]}")


# تحليل توزيع بعض الأعمدة باستخدام الرسوم البيانية (مثال)
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd

# مسار الملف الأصلي (عدّل المسار حسب مكان الملف لديك)
file_path = '/content/drive/MyDrive/Hakathon/Enhanced_Final_Team_Data.xlsx'

# تحميل البيانات من الورقتين "Points" و "Details"
df_points = pd.read_excel(file_path, sheet_name='Points')
df_details = pd.read_excel(file_path, sheet_name='Details')

# معاينة البيانات
print(df_points.head())
print(df_details.head())

# تركيب المكتبات الضرورية
!pip install pandas openpyxl

# استيراد المكتبات
import pandas as pd
from openpyxl import load_workbook

# مسار الملف
file_path = '/content/drive/MyDrive/Hakathon/Enhanced_Final_Team_Data.xlsx'

# تحميل البيانات من الورقتين (Points و Details)
df_points = pd.read_excel(file_path, sheet_name='Points')
df_details = pd.read_excel(file_path, sheet_name='Details')

# الأعمدة المطلوبة من Points
points_cols = [
    'Match ID', 'Team', 'Player', 'Position', 'Rank', 'Points', 'Minutes played',
    'Goals 10', 'Shots on target 4', 'Shots off target 2', 'Interceptions 2',
    'Fouls won 1', 'Fouls conceded -1', 'Offsides -1', 'Yellow cards -2',
    'Red cards -5', 'Goals conceded (Player=-1, GK=-6)',
    'Penalties won 4', 'Saves (Player=0, GK=5)', 'Penalties saved (Player=0, GK=5)'
]

# الأعمدة المطلوبة من Details
details_cols = [
    'Match ID', 'Player', 'Accurate Passes', 'Hit woodwork', 'Shots inside the box',
    'Shots outside the box', 'Headed shots', 'Expected goals', 'Goal kick', 'Throw ins',
    'Goals outside the box', 'Right foot goals', 'Left foot goals', 'Headed goals',
    'Penalty goals', 'Direct free kick goals', 'Season'
]

# اختيار الأعمدة المحددة
df_points_filtered = df_points[points_cols]
df_details_filtered = df_details[details_cols]

# دمج البيانات باستخدام Match ID و Player
df_merged = pd.merge(df_points_filtered, df_details_filtered,
                     on=['Match ID', 'Player'],
                     how='left')

# معاينة البيانات بعد الدمج
print(df_merged.head())

# تحميل الكتاب الأصلي من أجل حفظ الورقة الجديدة
book = load_workbook(file_path)

# حفظ البيانات الجديدة في شيت جديد بنفس الملف الأصلي
with pd.ExcelWriter(file_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
    df_merged.to_excel(writer, sheet_name='Player_Performance_Merged', index=False)

print("✅ تم حفظ البيانات بنجاح داخل الملف الأصلي في ورقة جديدة.")

"""اكتشفنا في بيانات ناقصة .. نسعى الى اكتشاف المشكلة وحلها

"""

import pandas as pd

# مسار الملف الأصلي (عدّل المسار إذا كان مختلفًا)
file_path = '/content/drive/MyDrive/Hakathon/Enhanced_Final_Team_Data.xlsx'

# تحميل البيانات من الورقتين (Points و Details)
df_points = pd.read_excel(file_path, sheet_name='Points')
df_details = pd.read_excel(file_path, sheet_name='Details')

# عرض سريع للتأكد من البيانات
print("Points data:", df_points.head())
print("Details data:", df_details.head())

# تنظيف Match ID و Player في الجدولين لضمان التطابق
df_points['Match ID'] = df_points['Match ID'].astype(str).str.strip()
df_points['Player'] = df_points['Player'].astype(str).str.strip().str.lower()

df_details['Match ID'] = df_details['Match ID'].astype(str).str.strip()
df_details['Player'] = df_details['Player'].astype(str).str.strip().str.lower()

# الأعمدة المطلوبة من Points
points_cols = [
    'Match ID', 'Team', 'Player', 'Position', 'Rank', 'Points', 'Minutes played',
    'Goals 10', 'Shots on target 4', 'Shots off target 2', 'Interceptions 2',
    'Fouls won 1', 'Fouls conceded -1', 'Offsides -1', 'Yellow cards -2',
    'Red cards -5', 'Goals conceded (Player=-1, GK=-6)',
    'Penalties won 4', 'Saves (Player=0, GK=5)', 'Penalties saved (Player=0, GK=5)'
]

# الأعمدة المطلوبة من Details
details_cols = [
    'Match ID', 'Player', 'Accurate Passes', 'Hit woodwork', 'Shots inside the box',
    'Shots outside the box', 'Headed shots', 'Expected goals', 'Goal kick', 'Throw ins',
    'Goals outside the box', 'Right foot goals', 'Left foot goals', 'Headed goals',
    'Penalty goals', 'Direct free kick goals', 'Season'
]

# فلترة الأعمدة
df_points_filtered = df_points[points_cols]
df_details_filtered = df_details[details_cols]

# الدمج باستخدام Match ID و Player
df_merged = pd.merge(df_points_filtered, df_details_filtered,
                     on=['Match ID', 'Player'],
                     how='left')

# عرض النتائج بعد الدمج
df_merged.head()

from openpyxl import load_workbook

# تحميل الملف الأصلي
book = load_workbook(file_path)

# حفظ البيانات في شيت جديد بنفس الملف
with pd.ExcelWriter(file_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
    df_merged.to_excel(writer, sheet_name='Player_Performance_Clean_Merged', index=False)

print("✅ تم حفظ البيانات بنجاح في الملف الأصلي في شيت جديد.")

# عرض عدد القيم المفقودة لكل عمود
missing_values = df.isnull().sum().sort_values(ascending=False)
print("Missing values per column:\n", missing_values)

# رسم القيم المفقودة (للتوضيح)
missing_values.plot(kind='bar', figsize=(12,6), color='skyblue')
plt.title('Missing Values per Column')
plt.ylabel('Number of Missing Values')
plt.xlabel('Columns')
plt.show()

# رسم توزيع نقاط اللاعبين
plt.figure(figsize=(10,6))
sns.histplot(df['Points'], kde=True, bins=30)
plt.title('Distribution of Player Points')
plt.xlabel('Points')
plt.ylabel('Frequency')
plt.show()

# تحقق سريع من بعض الصفوف المفقودة
df[df['Points'].isnull()].head(10)

# فحص بيانات مفقودة من Points
missing_points = df[df['Points'].isnull()]
print("Missing Points shape:", missing_points.shape)
print(missing_points[['Match ID', 'Player']].head(10))

# فحص بيانات مفقودة من Minutes played
missing_minutes = df[df['Minutes played'].isnull()]
print("Missing Minutes played shape:", missing_minutes.shape)
print(missing_minutes[['Match ID', 'Player']].head(10))

# Outer Merge
df_merged_outer = pd.merge(df_points_filtered, df_details_filtered,
                           on=['Match ID', 'Player'],
                           how='outer', indicator=True)

# فحص نتيجة الدمج
print(df_merged_outer['_merge'].value_counts())

# تنفيذ دمج داخلي Inner Merge للحصول على بيانات كاملة فقط
df_final_clean = pd.merge(df_points_filtered, df_details_filtered,
                          on=['Match ID', 'Player'],
                          how='inner')

# تحقق سريع من القيم المفقودة
print(df_final_clean.isnull().sum())

# حفظ البيانات النظيفة والكاملة
df_final_clean.to_excel('/content/drive/MyDrive/Hakathon/Final_Clean_Player_Performance.xlsx', index=False)

print("تم حفظ البيانات النظيفة والكاملة (121,608 سجل) بنجاح.")

""" (Optimal Formation Model)"""

# تحميل المكتبات الضرورية
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# مسار البيانات النظيفة
file_path = '/content/drive/MyDrive/Hakathon/Final_Clean_Player_Performance.xlsx'

# تحميل البيانات
df = pd.read_excel(file_path)

# عرض سريع
df.head()

# اختيار الأعمدة العددية التي يُتوقع تأثيرها في أداء اللاعبين
numeric_cols = [
    'Points', 'Minutes played', 'Goals 10', 'Shots on target 4', 'Shots off target 2',
    'Interceptions 2', 'Fouls won 1', 'Fouls conceded -1', 'Yellow cards -2', 'Red cards -5',
    'Goals conceded (Player=-1, GK=-6)', 'Penalties won 4', 'Saves (Player=0, GK=5)',
    'Penalties saved (Player=0, GK=5)', 'Accurate Passes', 'Expected goals', 'Assists',
    'Shots inside the box', 'Shots outside the box', 'Headed shots'
]

# إنشاء DataFrame مخصص لتحليل الارتباط
df_corr = df[numeric_cols]

# تأكد من عدم وجود قيم مفقودة
df_corr.dropna(inplace=True)

# عرض سريع
df_corr.head()

# اختيار الأعمدة العددية التي يُتوقع تأثيرها في أداء اللاعبين
numeric_cols = [
    'Points', 'Minutes played', 'Goals 10', 'Shots on target 4', 'Shots off target 2',
    'Interceptions 2', 'Fouls won 1', 'Fouls conceded -1', 'Yellow cards -2', 'Red cards -5',
    'Goals conceded (Player=-1, GK=-6)', 'Penalties won 4', 'Saves (Player=0, GK=5)',
    'Penalties saved (Player=0, GK=5)', 'Accurate Passes', 'Expected goals',
    'Shots inside the box', 'Shots outside the box', 'Headed shots'
]

# Check if 'Assists' column exists, and include it if it does
if 'Assists' in df.columns:
    numeric_cols.append('Assists')

# إنشاء DataFrame مخصص لتحليل الارتباط
df_corr = df[numeric_cols]

# تأكد من عدم وجود قيم مفقودة
df_corr.dropna(inplace=True)

# عرض سريع
df_corr.head()

# حساب مصفوفة الارتباط
corr_matrix = df_corr.corr()

# عرض المصفوفة بشكل واضح (حراري)
plt.figure(figsize=(14, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix for Player Performance Metrics')
plt.show()

selected_features = [
    'Goals 10',
    'Shots on target 4',
    'Minutes played',
    'Accurate Passes',
    'Expected goals',
    'Shots inside the box',
    'Shots outside the box',
    'Shots off target 2',
    'Fouls won 1'
]

# تحميل المكتبات
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
import joblib

# مسار البيانات النظيفة
file_path = '/content/drive/MyDrive/Hakathon/Final_Clean_Player_Performance.xlsx'

# تحميل البيانات
df = pd.read_excel(file_path)

# الأعمدة المختارة بناءً على الكورليشن
selected_features = [
    'Goals 10',
    'Shots on target 4',
    'Minutes played',
    'Accurate Passes',
    'Expected goals',
    'Shots inside the box',
    'Shots outside the box',
    'Shots off target 2',
    'Fouls won 1'
]

df_model = df[selected_features + ['Player', 'Team', 'Position', 'Points']]

# إزالة البيانات المفقودة
df_model.dropna(inplace=True)

# بيانات التدريب
X = df_model[selected_features]
y = df_model['Points']

# تدريب النموذج
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X, y)

# حفظ النموذج
joblib.dump(rf_model, 'player_performance_model.pkl')

# وظيفة التنبؤ
def predict_optimal_team(team1, team2, match_location, df_model, rf_model):
    # فلترة بيانات اللاعبين لكل فريق
    team1_players = df_model[df_model['Team'] == team1].copy()
    team2_players = df_model[df_model['Team'] == team2].copy()

    # إضافة معامل أفضلية اللعب على أرض الملعب
    if match_location == team1:
        team1_players['Home'] = 1
        team2_players['Home'] = 0
    else:
        team1_players['Home'] = 0
        team2_players['Home'] = 1

    # توقع نقاط اللاعبين
    team1_players['Predicted Points'] = rf_model.predict(team1_players[selected_features])
    team2_players['Predicted Points'] = rf_model.predict(team2_players[selected_features])

    # اختيار أفضل 11 لاعبًا لكل فريق
    optimal_team1 = team1_players.sort_values('Predicted Points', ascending=False).head(11)
    optimal_team2 = team2_players.sort_values('Predicted Points', ascending=False).head(11)

    return optimal_team1[['Player', 'Position', 'Predicted Points']], optimal_team2[['Player', 'Position', 'Predicted Points']]

# وظيفة التنبؤ المُحسنة (دون تكرار اللاعبين)
def predict_optimal_team_no_duplicates(team1, team2, match_location, df_model, rf_model):
    # فلترة بيانات اللاعبين لكل فريق
    team1_players = df_model[df_model['Team'] == team1].copy()
    team2_players = df_model[df_model['Team'] == team2].copy()

    # التنبؤ بالنقاط
    team1_players['Predicted Points'] = rf_model.predict(team1_players[selected_features])
    team2_players['Predicted Points'] = rf_model.predict(team2_players[selected_features])

    # إزالة التكرار بأخذ أفضل أداء متوقع لكل لاعب
    team1_players_unique = team1_players.loc[team1_players.groupby('Player')['Predicted Points'].idxmax()]
    team2_players_unique = team2_players.loc[team2_players.groupby('Player')['Predicted Points'].idxmax()]

    # اختيار أفضل 11 لاعبًا من كل فريق
    optimal_team1 = team1_players_unique.sort_values(by='Predicted Points', ascending=False).head(11)
    optimal_team2 = team2_players_unique.sort_values(by='Predicted Points', ascending=False).head(11)

    return optimal_team1[['Player', 'Position', 'Predicted Points']], optimal_team2[['Player', 'Position', 'Predicted Points']]

# استدعاء الدالة الجديدة بوضوح
team1 = input("أدخل اسم الفريق الأول: ")
team2 = input("أدخل اسم الفريق الثاني: ")
match_location = input("أدخل اسم الفريق الذي ستقام المباراة على أرضه: ")

optimal_team1, optimal_team2 = predict_optimal_team_no_duplicates(team1, team2, match_location, df_model, rf_model)

# عرض التشكيلة المثالية بشكل واضح دون تكرار
print("\n⚽ التشكيلة المثالية لفريق", team1)
print(optimal_team1.to_string(index=False))

print("\n⚽ التشكيلة المثالية لفريق", team2)
print(optimal_team2.to_string(index=False))

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor

# تحميل البيانات
df = pd.read_excel('/content/drive/MyDrive/Hakathon/Final_Clean_Player_Performance.xlsx')

# اختيار بيانات موسم 2024/2025 فقط
df_recent = df[df['Season'] == '2024/2025'].copy()

# التأكد من تحميل البيانات بشكل صحيح
df_recent.head()

selected_features = [
    'Goals 10',
    'Shots on target 4',
    'Minutes played',
    'Accurate Passes',
    'Expected goals',
    'Shots inside the box',
    'Shots outside the box',
    'Shots off target 2',
    'Fouls won 1'
]

df_model = df_recent[selected_features + ['Player', 'Team', 'Position', 'Points']]
df_model.dropna(inplace=True)

X = df_model[selected_features]
y = df_model['Points']

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X, y)

def suggest_multiple_formations(team_name, df_model, rf_model):
    team_players = df_model[df_model['Team'] == team_name].copy()
    team_players['Predicted Points'] = rf_model.predict(team_players[selected_features])

    # إزالة التكرار بأفضل أداء لكل لاعب
    team_players_unique = team_players.loc[team_players.groupby('Player')['Predicted Points'].idxmax()]

    formations = {
        'هجومية (4-3-3)': {'GK':1, 'DF':4, 'MF':3, 'FW':3},
        'متوازنة (4-4-2)': {'GK':1, 'DF':4, 'MF':4, 'FW':2},
        'دفاعية (5-4-1)': {'GK':1, 'DF':5, 'MF':4, 'FW':1}
    }

    suggested_formations = {}

    for formation, positions in formations.items():
        selected_players = pd.DataFrame()

        for position, count in positions.items():
            position_players = team_players_unique[team_players_unique['Position'] == position]
            top_players = position_players.nlargest(count, 'Predicted Points')
            selected_players = pd.concat([selected_players, top_players])

        suggested_formations[formation] = selected_players[['Player', 'Position', 'Predicted Points']]

    return suggested_formations

ب
team_name = input("أدخل اسم الفريق للحصول على التشكيلات المقترحة: ")

formations_suggestions = suggest_multiple_formations(team_name, df_model, rf_model)

# عرض كل التشكيلات المقترحة بوضوح
for formation_name, players in formations_suggestions.items():
    print(f"\n📌 التشكيلة {formation_name} لفريق {team_name}:")
    print(players.to_string(index=False))

# إنشاء متوسط قوة الفرق
team_strength = df_model.groupby('Team')['Points'].mean().reset_index()
team_strength.columns = ['Team', 'Team_Strength']

# دمج القوة مع البيانات الأساسية
df_model = pd.merge(df_model, team_strength, on='Team', how='left')

# إنشاء متوسط قوة الفرق
team_strength = df_model.groupby('Team')['Points'].mean().reset_index()
team_strength.columns = ['Team', 'Avg_Team_Strength'] # Changed column name

# دمج القوة مع البيانات الأساسية
df_model = pd.merge(df_model, team_strength, on='Team', how='left')

# إضافة متغير مكان المباراة (Home/Away)
df_model['Home_Away'] = np.random.choice(['Home', 'Away'], size=len(df_model))

# إضافة متغير ديربي (Yes/No)
df_model['Derby'] = np.random.choice(['Yes', 'No'], size=len(df_model))

# تحويل Home_Away و Derby إلى أرقام
df_model = pd.get_dummies(df_model, columns=['Home_Away', 'Derby'], drop_first=True)

# تحديد الميزات الجديدة مع المتغيرات الإضافية
extended_features = selected_features + ['Team_Strength', 'Home_Away_Home', 'Derby_Yes']

# تدريب النموذج المتقدم
X_extended = df_model[extended_features]
y = df_model['Points']

advanced_rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
advanced_rf_model.fit(X_extended, y)

def advanced_formation_suggestion_unique(my_team, opponent_team, match_location, derby, df_model, advanced_rf_model):
    my_players = df_model[df_model['Team'] == my_team].copy()

    # تحديد قوة الخصم
    opponent_strength = df_model[df_model['Team'] == opponent_team]['Team_Strength'].mean()

    # إنشاء DataFrame مؤقت لتوقع أداء اللاعبين في ظروف المباراة
    my_players['Opponent_Strength'] = opponent_strength
    my_players['Home_Away_Home'] = 1 if match_location == 'Home' else 0
    my_players['Derby_Yes'] = 1 if derby == 'Yes' else 0

    # توقع النقاط بناءً على المتغيرات الجديدة
    my_players['Predicted Points'] = advanced_rf_model.predict(my_players[extended_features])

    # إزالة التكرارات عن طريق أخذ أفضل أداء لكل لاعب مرة واحدة
    my_players_unique = my_players.loc[my_players.groupby('Player')['Predicted Points'].idxmax()]

    # اختيار التشكيلة المثالية (حارس + 10 لاعبين)
    positions_required = {'GK':1, 'DF':4, 'MF':3, 'FW':3}

    final_squad = pd.DataFrame()

    for position, count in positions_required.items():
        position_players = my_players_unique[my_players_unique['Position'] == position]
        top_players = position_players.sort_values('Predicted Points', ascending=False).head(count)
        final_squad = pd.concat([final_squad, top_players])

    # ضمان عدم تكرار أي لاعب
    final_squad = final_squad.drop_duplicates(subset=['Player'])

    return final_squad[['Player', 'Position', 'Predicted Points']]

# تجربة التشكيلة الآن بدون تكرار
my_team = input("أدخل اسم فريقك: ")
opponent_team = input("أدخل اسم الفريق الخصم: ")
match_location = input("مكان المباراة (Home/Away): ")
derby = input("هل المباراة ديربي (Yes/No): ")

final_squad_unique = advanced_formation_suggestion_unique(my_team, opponent_team, match_location, derby, df_model, advanced_rf_model)

print("\n📌 التشكيلة المثالية (بدون تكرار):")
print(final_squad_unique.to_string(index=False))

def advanced_formation_both_teams(team1, team2, match_location, derby, df_model, advanced_rf_model):

    def get_squad(team, opponent):
        players = df_model[df_model['Team'] == team].copy()
        opponent_strength = df_model[df_model['Team'] == opponent]['Team_Strength'].mean()

        players['Opponent_Strength'] = opponent_strength
        players['Home_Away_Home'] = 1 if match_location == team else 0
        players['Derby_Yes'] = 1 if derby == 'Yes' else 0

        players['Predicted Points'] = advanced_rf_model.predict(players[extended_features])

        players_unique = players.loc[players.groupby('Player')['Predicted Points'].idxmax()]

        positions_required = {'GK':1, 'DF':4, 'MF':3, 'FW':3}
        squad = pd.DataFrame()

        for position, count in positions_required.items():
            position_players = players_unique[players_unique['Position'] == position]
            top_players = position_players.sort_values('Predicted Points', ascending=False).head(count)
            squad = pd.concat([squad, top_players])

        return squad[['Player', 'Position', 'Predicted Points']].drop_duplicates(subset=['Player'])

    # تشكيلة الفريق الأول
    team1_squad = get_squad(team1, team2)

    # تشكيلة الفريق الثاني
    team2_squad = get_squad(team2, team1)

    return team1_squad, team2_squad

# تجربة الدالة مع الفريقين
my_team = input("أدخل اسم فريقك: ")
opponent_team = input("أدخل اسم الفريق الخصم: ")
match_location = input(f"مكان المباراة ({my_team}/{opponent_team}): ")
derby = input("هل المباراة ديربي (Yes/No): ")

team1_squad, team2_squad = advanced_formation_both_teams(my_team, opponent_team, match_location, derby, df_model, advanced_rf_model)

# طباعة التشكيلات المثالية بوضوح
print(f"\n⚽ التشكيلة المثالية لفريق {my_team}:")
print(team1_squad.to_string(index=False))

print(f"\n⚽ التشكيلة المثالية لفريق {opponent_team}:")
print(team2_squad.to_string(index=False))

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np

# تحميل صورة ملعب من الإنترنت
import requests
from io import BytesIO
from PIL import Image

url = "https://www.pinterest.com/pin/full-hd-football-field-background-football-field-empty-scene-top-shot-free-download-image--871235490392341667/" # صورة ملعب واضحة
response = requests.get(url)
field_img = Image.open(BytesIO(response.content))

plt.imshow(field_img)
plt.axis('off')
plt.show()